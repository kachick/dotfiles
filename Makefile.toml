[config]
skip_core_tasks = true

[tasks.default]
alias = "help"

[tasks.help]
script = [
  'makers --list-all-steps',
]

[tasks.setup]
dependencies = ['build']
script = [
  "cp .githooks/* .git/hooks/",
  "git config --local core.whitespace cr-at-eol",
]

[tasks.update]
script = [
  "nix flake update --commit-lock-file",
]

[tasks.build-lint]
condition.files_modified = { input = ["internal/fileutils/*.go", "./cmd/lint/*.go"], output = ["./dist/lint"] }
command = 'go'
args = ['build', '-v', '-o', 'dist/lint', './cmd/lint']

[tasks.lint]
dependencies = ['build-lint']
command = 'dist/lint'

[tasks.lint-all]
dependencies = ['build-lint']
command = 'dist/lint'
args = ['-all']

[tasks.fmt]
command = 'treefmt'

[tasks.check]
dependencies = [
  'build',
  'test',
  'lint-all',
  'build-go-race-as-the-race-test',
]

[tasks.deps]
dependencies = ['build']
command = 'dist/deps'

[tasks.prepare-build]
command = 'mkdir'
args = ['-p', 'dist/race']

[tasks.build]
dependencies = ['prepare-build']
command = 'go'
args = [
  'build',
  '-v',
  '-o',
  'dist',
  './...',
]

[tasks.build-go-race-as-the-race-test]
dependencies = ['prepare-build']
command = 'go'
args = [
  'build',
  '-v',
  '-race',
  '-o',
  'dist/race',
  './...',
]

[tasks.test-go]
dependencies = [
  'test-cmd',
  'test-pkg-reponame',
]

[tasks.test-cmd]
command = 'go'
args = [
  'test',
  './...',
]

[tasks.test-pkg-reponame]
cwd = "./pkgs/reponame"
command = 'go'
args = [
  'test',
  './...',
]

[tasks.test]
dependencies = [
  'test-go',
]
command = 'nix'
args = [
  'run',
  '.#home-manager',
  '--',
  'switch',
  '-n', # dry-run
  '-b',
  'backup',
  '--flake',
  '.#${@}',
  '--show-trace',
]

[tasks.apply]
command = 'nix'
args = [
  'run',
  '.#home-manager',
  '--',
  'switch',
  '-b',
  'backup',
  '--flake',
  '.#${@}',
  '--show-trace',
]

[tasks.ci-dev]
dependencies = [
  'default',
  'setup',
  'deps',
  'build',
  # 'test', # Needs home-manager, so needless in Nix-CI
  'lint-all',
  'test-go',
  'build-go-race-as-the-race-test',
  'fmt',
]

[tasks.build-container]
command = './containers/build.bash'

[tasks.sandbox]
command = './containers/sandbox.bash'

[tasks.sandbox-cr]
command = './containers/sandbox-with-ghcr.bash'
args = [
  '${@}',
]

[tasks.workspace]
command = 'zellij'
args = ['--layout', './config/zellij/layouts/dotfiles.kdl']
